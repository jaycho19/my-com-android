package com.dongfang.apad.param;

/** @author dongfang */
public class UserCommand {
	public static final byte[]	testCommand		= { 0x40, (byte) 0x96, 0x00, 0x00, 0x00, 0x00, 0x02, (byte) 0xDB, 0x31, 0x01, 0x00, 0x00 };
	public static final byte[]	RCARDID			= { 0x40, (byte) 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xD6 };
	/** 姓名 30 Unicode */
	public static final byte[]	RNAME			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x1E, 0x0B, 0x00, 0x00 };
	/** 性别 41 1 1男0女 16进制 */
	public static final byte[]	RGENDER			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x29, 0x01, 0x00, 0x00 };
	/** 出生年份 42-43 2 例：0x13和0x48 16进制 */
	public static final byte[]	RYEAR			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x2A, 0x02, 0x00, 0x00 };
	/** 出生月份 44 1 16进制 */
	public static final byte[]	RMONTH			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x2C, 0x01, 0x00, 0x00 };
	/** 出生日 45 1 16进制 */
	public static final byte[]	RDAY			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x2D, 0x01, 0x00, 0x00 };
	/** 籍贯 46-48 3 例：0x1f,0x01,0x08表示为310108 16进制 */
	public static final byte[]	RNATONLOCATION	= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x2E, 0x01, 0x00, 0x00 };
	/** 年龄 49 1 16进制 */
	public static final byte[]	RAGE			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x31, 0x01, 0x00, 0x00 };
	/** 身份证号码 53-70 18 16进制 */
	public static final byte[]	RIDCARDNO		= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x32, 0x0D, 0x00, 0x00 };

	// -------------------------------------------------------------------------------------------------------------------------------------
	/** 身高体重 */
	public static final byte[]	RHEIGHTWIGHT	= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x47, 0x04, 0x00, 0x00 };
	/** 肺活量 */
	public static final byte[]	RPULMONARY		= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x4B, 0x02, 0x00, 0x00 };
	/** 握力：整数部分 */
	public static final byte[]	RGRIP_0			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x4C, 0x01, 0x00, 0x00 };
	/** 握力：小数部分 */
	public static final byte[]	RGRIP_1			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x60, 0x01, 0x00, 0x00 };
	/** 反应时间 */
	public static final byte[]	REACTION		= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x4E, 0x04, 0x00, 0x00 };
	/** 坐位体前屈 */
	public static final byte[]	RZWTQQ			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x52, 0x03, 0x00, 0x00 };
	/** 纵跳 */
	public static final byte[]	RVERTICALJUMP	= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x55, 0x02, 0x00, 0x00 };
	/** 闭眼单脚直立 */
	public static final byte[]	RDYDJZL			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x57, 0x01, 0x00, 0x00 };
	/** 仰卧起坐 */
	public static final byte[]	RSIT_UP			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x58, 0x01, 0x00, 0x00 };
	/** 俯卧撑 */
	public static final byte[]	RPUSH_UP		= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x59, 0x01, 0x00, 0x00 };
	/** 台阶测试 */
	public static final byte[]	RSTEP			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x5A, 0x06, 0x00, 0x00 };

	/**@deprecated*/
	public static byte[] check(byte[] array) {
		if (array.length > 7) {
			array[7] = (byte) (array[0] + array[1] + array[2] + array[3] + array[4] + array[5] + array[6]);
		}
		return array;
	}

	/***
	 * 返回数据校验
	 * 
	 * @param input
	 * @return
	 */
	public static boolean checkReadInput(byte[] input, int blkNum) {
		if (0x40 == input[0] && (byte) 0x96 == input[1] && input[4] == 0x00 && input[6] == 0x08 && input[7] == (byte)0xDE) {
			return true;
		}
		if (0x40 != input[0] || (byte) 0x98 != input[1] || 0x01 != input[3] || input[4] != 0x00) {
			return false;
		}

		// if (input[7] != (byte) (input[0] | input[1] |input[2] | input[3] | input[4]| input[5]| input[6])) {
		// return false;
		// }

		if (verticalParity(input) && input[6] != blkNum * 4) {
			return false;
		}

		return true;
	}

	public static boolean verticalParity(byte[] input) {
		if (input.length < 8)
			return false;

		// byte v1 = (byte) (input[0]^input[1]^ input[2]^ input[3]^ input[4]^ input[5] ^ input[6]&0x0f);
		//
		// v1 = (byte) (v1 % 10);
		// byte v2 = (byte) (input[0]/16 + input[1]/16 +0x0f + input[2]/10 +input[3]/10 + input[4]/10 + input[5]/10 + input[6]/10);
		// v2 = (byte) (0xF0 & v2);
		return true;
	}

	public static final byte[]	RUSER_0			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x00, 0x0c, 0x00, 0x00 };
	public static final byte[]	RUSER_1			= { 0x40, (byte) 0x98, 0x00, 0x01, 0x00, 0x00, 0x02, (byte) 0xDB, 0x0c, 0x06, 0x00, 0x00 };

	// public static byte[][] Rlist_INFO = { testCommand };
	public static byte[][]		Rlist_INFO		= { RUSER_0, RUSER_1 };
	/** 测试结果 */
	public static byte[][]		Rlist_RESULT	= { RHEIGHTWIGHT, RPULMONARY, RGRIP_0, RGRIP_1, REACTION, RZWTQQ, RVERTICALJUMP, RDYDJZL, RSIT_UP, RPUSH_UP, RSTEP };

}
